.. _shell:

开发环境导读
=================================

在正式开始开发之前，我们不妨回顾一下我们在docker开发环境中的Linux命令，以及一些我们自定义的小工具。


    * TAB 键自动补全
    * ls 列出目录
    * ls -al 使用格式化列出隐藏文件
    * pwd 显示当前目录
    * cd <dir> 切换到 dir 目录
    * cd 切换到 home 目录
    * cd .. 切换到父目录
    * mkdir <dir> 创建目录
    * touch <file> 创建文件
    * cat <file> 显示文件内容
    * less <file> 逐页显示文件内容
    * more <file>
    * head <file> 显示文件头 10 行
    * tail <file> 显示文件后 10 行
    * tail -f <file> 开始监控文件内容改动
    * xtail /var/log/nginx/\* 批量监控nginx日志
    * ctrl+c 结束程序
    * ctrl+z 停止当前程序，可使用 fg 恢复
    * ctrl+w 删除当前行中文字
    * ctrl+u 删除整行文字
    * ctrl+a/e 将光标移动至行首/尾
    * ctrl+r 搜索最近使用的命令
    * bg 列出已停止或者后台程序
    * fg 将最近作业带到前台
    * locate <file> 查找某个文件所在位置
    * top 参看当前运行的进程

删除vim非正常关闭的临时文件 deltmp
********************************************************

当vim非正常关闭或文件被同时打开两次时的时候，会有临时文件

如何当一个文件上次打开时被非正常关掉.再打开时，按R恢复文件，然后：wq保存退出。

最后用deltmp命令删除临时文件

tree 以树形显示当前目录结构
********************************************************

* tree 以树形结构显示当前目录下所有文件和目录
* tree -d 仅显示目录
* tree -L <num> 限制目录的最大深度

ag 搜索
********************************************************
* ag <something> 在目录所有文件中寻找 something
* ag <something> -py 在所有 Python 文件中搜索 something (CSS,JS同理)

autojump 一键直达目录 
********************************************************

`autojump <https://github.com/joelthelion/autojump>`_ 

在命令行中切换目录是最常用的操作，不过很少有比一遍又一遍重复“cd ls cd ls cd ls ……”更令人沮丧的事情了。如果你不是百分百确定你想要进入的下一个目录的名字，那么你不得不使用ls来确认，然后使用cd来进入你想要进的那一个。所幸的是，现在大量的终端和shell语言提供了强大的自动补全功能来处理该问题。但是，你仍然需要一直疯狂地敲击TAB键来干这事。如果你和我一样懒惰，你一定会对autojump感到惊喜。

autojump是一个命令行工具，它允许你可以直接跳转到你喜爱的目录，而不用管你现在身在何处。

* j <dir> 根据最近工作目录记录跳转到最合适的位置。

如果你不确认哪里是不是你要跳转的地方，敲击TAB键就会列出完整路径。

还是同样的例子，输入 ::

    autojump d

然后敲击tab键，将会返回/root/home/doc或者/root/home/ddl 。

如果你突然想要把当前目录变成你的最爱和使用最频繁的文件夹，你可以在该目录通过命令的参数 i 来手工增加它的权重 ::

    j -i [权重]

这将使得该目录更可能被选择跳转。相反的例子是在该目录使用参数 d 来减少权重 ::

    j -d [权重]


42qucc
*********************

42qucc 是在线的随手贴，可以随意地自定义网址来自己记录或与朋友分享文字。


保存
......................

42qu.cc 提供在线分享文本文件的功能。在命令行中输入 ::

    42qucc < 某个文件名

即可获得诸如 `http://42qu.cc/6nhxuqpg <http://42qu.cc/6nhxuqpg>`_ 格式的网址，打开该链接即可看到分享的内容。

我们也可以自定义生成的网址 ::

    42qucc xxx < 某个文件名

读取
......................

将链接中的内容保存在文件中 ::

    42qucc http://42qu.cc/6nhxuqpg > 文件名


Linux的回收站 - trash-cli 
**********************************************

.. epigraph::

    凡事只要有可能出错，那就一定会出错。

    -- 墨菲定律

啊，删错文件了！！！

好吧，这已然是第N+1次了。

“此情可待成追忆，只是当时已枉然”。

我一直认为Linux最不人性化的设计就是没有回收站。

长期以来，rm命令就像一颗隐形的地雷，不知道什么时候就被踩到，壮烈牺牲。

“出师未捷身先死，长使英雄泪满襟”。

幸好，我们还有trash-cli，Linux的回收站。

与其等不小心误删除后去追悔莫已，去苦心钻研如何恢复文件，不如一开始就防患于未然。 

故，兵书曰，**善战者无赫赫之功**。

想使用trash-cli，首先安装 ::
    
    sudo pip install trash-cli

然后修改全局的bashrc ::

    alias rm="trash-put"
    trash-empty 99

这样删除文件就会进入回收站而不被直接删除了。同时清空删除超过99天的文件。

通常全局bashrc的路径是 ::
    
    /etc/profile

此外，我们可以在root用户的crontab中配置 ::

    trash-empty 99

每天晚上3点执行，自动清空删除超过99天的文件

trash-cli 的命令如下

* trash-empty         清空回收站 
* trash-list          查看被删除的文件 
* restore-trash       恢复被删除的文件 
* trash-rm            从回收站中删除单个文件

更多内容请浏览trash-cli `官方主页 <https://github.com/andreafrancia/trash-cli>`_

**本工具在798的docker镜像已中经内置并默认启用** 









